#!/usr/bin/env python3
"""
Script para regenerar el hash del usuario admin usando la funci√≥n de seguridad actual
que maneja correctamente el l√≠mite de 72 bytes de bcrypt
"""

import os
import sys
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# A√±adir la ruta ra√≠z del proyecto al sys.path
project_root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.append(project_root)

from sqlalchemy.orm import Session
from app.db.session import SessionLocal
from app.models.user import User
from app.core.security import get_password_hash, verify_password

def fix_admin_bcrypt():
    """Regenerar el hash del usuario admin con la funci√≥n de seguridad actual"""
    print("=== Regenerando Hash del Usuario Admin (Bcrypt Fix) ===")
    
    # Crear sesi√≥n de base de datos
    db: Session = SessionLocal()
    
    try:
        # Buscar usuario admin
        admin_user = db.query(User).filter(User.username == "admin").first()
        
        if not admin_user:
            print("‚ùå Usuario admin NO encontrado")
            return False
        
        print(f"‚úÖ Usuario admin encontrado:")
        print(f"   ID: {admin_user.id}")
        print(f"   Username: {admin_user.username}")
        print(f"   Email: {admin_user.email}")
        print(f"   Password hash actual: {admin_user.password[:30]}...")
        
        # Probar la contrase√±a actual
        print("\nüîç Probando contrase√±a actual...")
        try:
            current_password_valid = verify_password("admin123", admin_user.password)
            print(f"   Contrase√±a 'admin123' v√°lida: {current_password_valid}")
        except Exception as e:
            print(f"   ‚ùå Error verificando contrase√±a actual: {e}")
            current_password_valid = False
        
        # Generar nuevo hash usando la funci√≥n de seguridad actual
        print("\nüîß Generando nuevo hash con funci√≥n de seguridad actual...")
        try:
            new_password_hash = get_password_hash("admin123")
            print(f"‚úÖ Nuevo hash generado: {new_password_hash[:30]}...")
            
            # Verificar que el nuevo hash funciona
            verification = verify_password("admin123", new_password_hash)
            print(f"‚úÖ Verificaci√≥n del nuevo hash: {verification}")
            
            if not verification:
                print("‚ùå Error: El nuevo hash no verifica correctamente")
                return False
            
        except Exception as e:
            print(f"‚ùå Error generando nuevo hash: {e}")
            return False
        
        # Actualizar la contrase√±a en la base de datos
        print("\nüíæ Actualizando contrase√±a en la base de datos...")
        admin_user.password = new_password_hash
        
        # Guardar cambios
        db.commit()
        print("‚úÖ Contrase√±a actualizada exitosamente")
        
        # Verificar la actualizaci√≥n
        print("\nüîç Verificaci√≥n final...")
        try:
            final_verification = verify_password("admin123", admin_user.password)
            print(f"‚úÖ Verificaci√≥n final: {final_verification}")
            return final_verification
        except Exception as e:
            print(f"‚ùå Error en verificaci√≥n final: {e}")
            return False
        
    except Exception as e:
        print(f"‚ùå Error actualizando contrase√±a: {e}")
        import traceback
        traceback.print_exc()
        db.rollback()
        return False
    
    finally:
        db.close()

def test_password_functions():
    """Probar las funciones de contrase√±a directamente"""
    print("=== Test de Funciones de Contrase√±a ===")
    
    test_password = "admin123"
    print(f"Probando con contrase√±a: '{test_password}'")
    
    try:
        # Generar hash
        hash_result = get_password_hash(test_password)
        print(f"‚úÖ Hash generado: {hash_result[:30]}...")
        
        # Verificar hash
        verify_result = verify_password(test_password, hash_result)
        print(f"‚úÖ Verificaci√≥n: {verify_result}")
        
        return verify_result
        
    except Exception as e:
        print(f"‚ùå Error en test de funciones: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    print("üîß Iniciando correcci√≥n de bcrypt para usuario admin...")
    print("=" * 60)
    
    # Primero probar las funciones de contrase√±a
    print("1. Probando funciones de contrase√±a...")
    if not test_password_functions():
        print("‚ùå Error en las funciones de contrase√±a, abortando")
        return
    
    print("\n" + "=" * 60)
    print("2. Corrigiendo usuario admin...")
    
    result = fix_admin_bcrypt()
    
    print("\n" + "=" * 60)
    if result:
        print("‚úÖ Hash del usuario admin regenerado exitosamente")
        print("üéØ Ahora deber√≠a funcionar: username=admin, password=admin123")
    else:
        print("‚ùå Error regenerando el hash del usuario admin")

if __name__ == "__main__":
    main()