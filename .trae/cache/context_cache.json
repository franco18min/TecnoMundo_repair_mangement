{
  "cache_metadata": {
    "version": "1.0",
    "last_updated": "2025-01-18T13:09:00Z",
    "auto_update": true,
    "optimization_level": "aggressive",
    "token_reduction_target": "70-90%"
  },
  
  "project_context": {
    "name": "TecnoMundo Repair Management",
    "type": "fullstack_web_app",
    "stack": {
      "frontend": "React 18 + Vite + TailwindCSS",
      "backend": "FastAPI + SQLAlchemy",
      "database": "PostgreSQL (Local + Supabase)",
      "deployment": "Supabase + Vercel",
      "auth": "JWT + bcrypt"
    },
    "ports": {
      "frontend": 5173,
      "backend": 8001,
      "database": 5432
    }
  },
  
  "frequent_patterns": {
    "commands": {
      "create_component": {
        "pattern": "crear componente para [funcionalidad]",
        "frequency": 0,
        "last_used": null,
        "context_template": "frontend_component_creation"
      },
      "fix_error": {
        "pattern": "hay error en [área]", 
        "frequency": 0,
        "last_used": null,
        "context_template": "error_debugging"
      },
      "add_feature": {
        "pattern": "necesito [funcionalidad]",
        "frequency": 0,
        "last_used": null,
        "context_template": "feature_implementation"
      },
      "optimize_code": {
        "pattern": "optimizar [sistema]",
        "frequency": 0,
        "last_used": null,
        "context_template": "performance_optimization"
      },
      "test_functionality": {
        "pattern": "probar [funcionalidad]",
        "frequency": 0,
        "last_used": null,
        "context_template": "testing_setup"
      }
    }
  },
  
  "context_templates": {
    "frontend_component_creation": {
      "required_maps": ["frontend_map.json"],
      "common_files": [
        "./frontend/src/components/",
        "./frontend/src/hooks/",
        "./frontend/src/context/"
      ],
      "patterns": [
        "Componente funcional con hooks",
        "Props typing con PropTypes o TypeScript",
        "Estilos con TailwindCSS",
        "Estado local con useState"
      ]
    },
    
    "database_operations": {
      "context_template": "database_operations",
      "description": "Operaciones de base de datos con PostgreSQL y Supabase",
      "required_maps": ["database_map.json"],
      "required_files": [
        ".trae/maps/database_map.json",
        ".trae/config/mcp_config.yaml",
        ".trae/config/supabase_mcp_server.json"
      ],
      "common_patterns": [
        "Consultas SQL complejas",
        "Análisis de performance",
        "Migraciones de esquema",
        "Backup y restore",
        "Integración con Supabase MCP"
      ],
      "common_queries": [
        "SELECT status, COUNT(*) FROM repair_orders GROUP BY status",
        "SELECT * FROM repair_orders WHERE customer_id = $1 ORDER BY created_at DESC",
        "SELECT * FROM repair_orders WHERE status IN ('pending', 'in_progress')"
      ],
      "supabase_endpoints": [
        "GET /repair_orders - Obtener órdenes",
        "POST /repair_orders - Crear orden",
        "PATCH /repair_orders?id=eq.123 - Actualizar orden",
        "GET /repair_orders?select=*,customers(*) - JOIN con clientes"
      ],
      "tools_used": ["mcp_Postgrest_postgrestRequest", "mcp_Postgrest_sqlToRest"],
      "mcp_tools": [
        "mcp_Postgrest_postgrestRequest - Ejecutar consultas PostgREST",
        "mcp_Postgrest_sqlToRest - Convertir SQL a PostgREST"
      ],
      "token_optimization": "Usar caché de consultas frecuentes"
    },
    
    "error_debugging": {
      "required_maps": ["backend_map.json", "frontend_map.json", "database_map.json"],
      "common_files": [
        "./backend/app/core/logger.py",
        "./frontend/src/config/api.js",
        "errors.txt"
      ],
      "patterns": [
        "Revisar logs del backend",
        "Verificar conexión API",
        "Validar permisos y autenticación",
        "Comprobar estado de base de datos"
      ]
    },
    
    "feature_implementation": {
      "required_maps": ["backend_map.json", "frontend_map.json"],
      "common_files": [
        "./backend/app/models/",
        "./backend/app/schemas/",
        "./backend/app/api/v1/",
        "./frontend/src/components/",
        "./frontend/src/api/"
      ],
      "patterns": [
        "Backend: Model -> Schema -> CRUD -> API",
        "Frontend: Component -> API Service -> Context",
        "Validación en ambos extremos",
        "Testing unitario y de integración"
      ]
    },
    
    "performance_optimization": {
      "required_maps": ["backend_map.json", "frontend_map.json", "database_map.json"],
      "focus_areas": [
        "Database queries optimization",
        "React component memoization", 
        "API response caching",
        "Bundle size reduction"
      ]
    },
    
    "testing_setup": {
      "required_maps": ["backend_map.json", "frontend_map.json"],
      "testing_tools": [
        "Backend: pytest + FastAPI TestClient",
        "Frontend: Jest + React Testing Library",
        "E2E: Playwright o Cypress"
      ]
    }
  },
  
  "session_context": {
    "current_session": {
      "start_time": "2025-01-18T13:09:00Z",
      "commands_executed": 0,
      "context_switches": 0,
      "active_area": null,
      "recent_files": [],
      "error_count": 0
    },
    
    "user_preferences": {
      "language": "español",
      "auto_execution": true,
      "detail_level": "medium",
      "confirmation_required": false
    }
  },
  
  "optimization_cache": {
    "token_usage": {
      "average_per_request": 0,
      "peak_usage": 0,
      "reduction_achieved": 0,
      "target_reduction": "70-90%"
    },
    
    "response_times": {
      "average": 0,
      "target": "<30 segundos",
      "cache_hit_rate": 0,
      "target_hit_rate": ">80%"
    }
  },
  
  "auto_update_rules": {
    "frequency": "after_each_change",
    "triggers": [
      "new_file_created",
      "existing_file_modified", 
      "new_command_pattern_detected",
      "error_resolved",
      "context_switch"
    ],
    
    "update_actions": [
      "refresh_file_maps",
      "update_frequency_counters",
      "optimize_context_templates",
      "clean_old_cache_entries"
    ]
  }
}