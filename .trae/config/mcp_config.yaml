# 🔌 Configuración MCP para PostgreSQL
# Model Context Protocol para acceso directo a base de datos

mcp_configuration:
  enabled: true
  version: "1.0"
  database_type: "postgresql"
  
  connection:
    # Configuración local (desarrollo)
    local:
      host: "localhost"
      port: 5432
      database: "tecnomundo_repair"
      schema: "public"
    
    # Configuración Supabase (producción)
    supabase:
      api_url: "https://zshbhslyzclpovyngryf.supabase.co"
      schema: "public"
      project_id: "zshbhslyzclpovyngryf"
    
  # Configuración de seguridad
  security:
    read_only_mode: false
    allowed_operations:
      - "SELECT"
      - "INSERT" 
      - "UPDATE"
      - "DELETE"
    
    restricted_tables: []
    sensitive_columns:
      - "password"
      - "password_hash"
      - "secret_key"
    
  # Configuración del servicio MCP
  service:
    file_path: "./backend/app/services/mcp_service.py"
    config_path: "./backend/app/core/config_mcp.py"
    
    methods:
      query_database:
        description: "Ejecutar consultas SQL de lectura"
        parameters: ["sql_query", "params"]
        return_type: "list[dict]"
        
      execute_sql:
        description: "Ejecutar comandos SQL de escritura"
        parameters: ["sql_command", "params"]
        return_type: "dict"
        
      get_schema_info:
        description: "Obtener información del esquema"
        parameters: ["table_name"]
        return_type: "dict"

# 🎯 Casos de uso comunes
common_use_cases:
  data_analysis:
    description: "Análisis de datos para reportes"
    queries:
      - "SELECT COUNT(*) as total_orders FROM repair_orders"
      - "SELECT status, COUNT(*) FROM repair_orders GROUP BY status"
      - "SELECT DATE(created_at) as date, COUNT(*) FROM repair_orders WHERE created_at >= NOW() - INTERVAL '30 days' GROUP BY DATE(created_at)"
  
  debugging:
    description: "Depuración de problemas de datos"
    queries:
      - "SELECT * FROM repair_orders WHERE status IS NULL"
      - "SELECT * FROM users WHERE email IS NULL OR email = ''"
      - "SELECT ro.*, c.name FROM repair_orders ro LEFT JOIN customers c ON ro.customer_id = c.id WHERE c.id IS NULL"
  
  maintenance:
    description: "Tareas de mantenimiento"
    queries:
      - "SELECT table_name, pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size FROM pg_tables WHERE schemaname = 'public'"
      - "SELECT * FROM pg_stat_activity WHERE state = 'active'"

# 🔍 Consultas predefinidas para IA
ai_queries:
  get_order_details:
    sql: "SELECT ro.*, c.name as customer_name, u.username as assigned_user, b.name as branch_name, dt.name as device_type FROM repair_orders ro JOIN customers c ON ro.customer_id = c.id LEFT JOIN users u ON ro.user_id = u.id LEFT JOIN branches b ON ro.branch_id = b.id LEFT JOIN device_types dt ON ro.device_type_id = dt.id WHERE ro.id = $1"
    description: "Obtener detalles completos de una orden"
    
  get_customer_history:
    sql: "SELECT ro.*, dt.name as device_type FROM repair_orders ro LEFT JOIN device_types dt ON ro.device_type_id = dt.id WHERE ro.customer_id = $1 ORDER BY ro.created_at DESC"
    description: "Historial de órdenes de un cliente"
    
  get_branch_statistics:
    sql: "SELECT b.name, COUNT(ro.id) as total_orders, COUNT(CASE WHEN ro.status = 'completed' THEN 1 END) as completed_orders FROM branches b LEFT JOIN repair_orders ro ON b.id = ro.branch_id GROUP BY b.id, b.name"
    description: "Estadísticas por sucursal"
    
  get_pending_orders:
    sql: "SELECT ro.ticket_number, c.name as customer_name, ro.created_at, ro.status FROM repair_orders ro JOIN customers c ON ro.customer_id = c.id WHERE ro.status IN ('pending', 'in_progress') ORDER BY ro.created_at ASC"
    description: "Órdenes pendientes y en progreso"

# 🚨 Reglas de uso para IA
ai_usage_rules:
  automatic_queries:
    - "La IA puede ejecutar consultas SELECT sin confirmación"
    - "Consultas de análisis y reportes son automáticas"
    - "Consultas de debugging requieren contexto del problema"
  
  restricted_operations:
    - "INSERT/UPDATE/DELETE requieren validación de contexto"
    - "Nunca modificar datos de usuarios sin confirmación explícita"
    - "Backup automático antes de operaciones masivas"
  
  performance_guidelines:
    - "Limitar resultados con LIMIT cuando sea apropiado"
    - "Usar índices existentes en consultas complejas"
    - "Evitar consultas que bloqueen la base de datos"
    - "Cachear resultados de consultas frecuentes"

# 📊 Monitoreo y logging
monitoring:
  log_queries: true
  log_file: "./backend/logs/mcp_queries.log"
  
  metrics:
    track_query_performance: true
    alert_slow_queries: true
    slow_query_threshold: "5 seconds"
    
  alerts:
    failed_connections: true
    long_running_queries: true
    high_cpu_usage: true

# 🔄 Integración con sistema .trae
trae_integration:
  auto_update_maps: true
  cache_query_results: true
  context_aware_suggestions: true
  
  update_triggers:
    - "schema_changes"
    - "new_tables_created"
    - "indexes_modified"
    - "performance_issues_detected"

# 🔐 Variables de entorno requeridas
environment_variables:
  # Para conexión local
  POSTGRES_USER: "usuario de PostgreSQL local"
  POSTGRES_PASSWORD: "contraseña de PostgreSQL local"
  POSTGRES_DB: "tecnomundo_repair"
  
  # Para conexión Supabase
  SUPABASE_SERVICE_KEY: "clave de servicio de Supabase (acceso completo)"
  SUPABASE_ANON_KEY: "clave anónima de Supabase (acceso público con RLS)"
  SUPABASE_URL: "https://zshbhslyzclpovyngryf.supabase.co"